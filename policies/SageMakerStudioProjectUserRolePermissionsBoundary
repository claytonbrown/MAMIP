{
    "PolicyVersion": {
        "CreateDate": "2024-11-28T04:51:07Z", 
        "VersionId": "v6", 
        "Document": {
            "Version": "2012-10-17", 
            "Statement": [
                {
                    "Action": "*", 
                    "NotResource": [
                        "arn:*:sagemaker:*:*:model-package-group/*", 
                        "arn:*:sagemaker:*:*:model-package/*", 
                        "arn:*:glue:*:*:catalog/*", 
                        "arn:*:glue:*:*:database/*"
                    ], 
                    "Effect": "Deny", 
                    "Condition": {
                        "Null": {
                            "aws:ResourceTag/AmazonDataZoneProject": "false", 
                            "aws:PrincipalTag/SageMakerStudioQueryExecutionRole": "true", 
                            "aws:PrincipalTag/AmazonDataZoneProject": "false"
                        }, 
                        "StringNotEquals": {
                            "aws:ResourceTag/AmazonDataZoneProject": "${aws:PrincipalTag/AmazonDataZoneProject}"
                        }
                    }, 
                    "Sid": "DenyAllNonMatchingProjectTag"
                }, 
                {
                    "Action": [
                        "q:StartConversation", 
                        "q:SendMessage"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Sid": "AmazonQChatPermissions"
                }, 
                {
                    "Action": [
                        "s3:GetBucketLocation"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Condition": {
                        "StringEquals": {
                            "aws:ResourceAccount": "${aws:PrincipalAccount}"
                        }
                    }, 
                    "Sid": "DataLakeS3BucketActions"
                }, 
                {
                    "Action": [
                        "kms:CreateGrant", 
                        "kms:ReEncryptFrom", 
                        "kms:ReEncryptTo", 
                        "kms:Decrypt", 
                        "kms:Encrypt", 
                        "kms:GenerateDataKey", 
                        "kms:GenerateDataKeyWithoutPlaintext"
                    ], 
                    "Resource": "arn:aws:kms:*:*:key/${aws:PrincipalTag/KmsKeyId}", 
                    "Effect": "Allow", 
                    "Condition": {
                        "StringEquals": {
                            "aws:ResourceAccount": "${aws:PrincipalAccount}"
                        }, 
                        "Null": {
                            "kms:EncryptionContextKeys": "false"
                        }, 
                        "StringLike": {
                            "kms:ViaService": [
                                "sqs.*.amazonaws.com", 
                                "sagemaker.*.amazonaws.com", 
                                "emr-serverless.*.amazonaws.com", 
                                "s3.*.amazonaws.com", 
                                "redshift.*.amazonaws.com", 
                                "bedrock.*.amazonaws.com", 
                                "secretsmanager.*.amazonaws.com"
                            ]
                        }
                    }, 
                    "Sid": "SameAccountKMSPermissions"
                }, 
                {
                    "Action": [
                        "kms:ListGrants", 
                        "kms:RevokeGrant", 
                        "kms:DescribeKey"
                    ], 
                    "Resource": "arn:aws:kms:*:*:key/${aws:PrincipalTag/KmsKeyId}", 
                    "Effect": "Allow", 
                    "Condition": {
                        "StringEquals": {
                            "aws:ResourceAccount": "${aws:PrincipalAccount}"
                        }, 
                        "StringLike": {
                            "kms:ViaService": [
                                "sqs.*.amazonaws.com", 
                                "sagemaker.*.amazonaws.com", 
                                "emr-serverless.*.amazonaws.com", 
                                "s3.*.amazonaws.com", 
                                "redshift.*.amazonaws.com", 
                                "bedrock.*.amazonaws.com", 
                                "secretsmanager.*.amazonaws.com"
                            ]
                        }
                    }, 
                    "Sid": "SameAccountKMSManagementPermissions"
                }, 
                {
                    "Action": [
                        "kms:ListAliases"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Condition": {
                        "StringEquals": {
                            "aws:ResourceAccount": "${aws:PrincipalAccount}"
                        }
                    }, 
                    "Sid": "ListKMSPermissions"
                }, 
                {
                    "Action": [
                        "s3:GetObject*", 
                        "s3:PutObject", 
                        "s3:PutObjectRetention", 
                        "s3:RestoreObject", 
                        "s3:ReplicateObject", 
                        "s3:DeleteObject", 
                        "s3:DeleteObjectVersion", 
                        "s3:ListMultipartUploadParts", 
                        "s3:ListBucket", 
                        "s3:AbortMultipartUpload"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Condition": {
                        "StringNotEquals": {
                            "aws:ResourceAccount": "${aws:PrincipalAccount}"
                        }
                    }, 
                    "Sid": "CrossAccountS3Permissions"
                }, 
                {
                    "Action": [
                        "kms:CreateGrant", 
                        "kms:Decrypt", 
                        "kms:Encrypt", 
                        "kms:GenerateDataKey", 
                        "kms:GenerateDataKeyWithoutPlaintext"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Condition": {
                        "Null": {
                            "kms:EncryptionContextKeys": "false"
                        }, 
                        "StringLike": {
                            "kms:ViaService": [
                                "s3.*.amazonaws.com", 
                                "sqs.*.amazonaws.com", 
                                "sagemaker.*.amazonaws.com"
                            ]
                        }, 
                        "StringNotEquals": {
                            "aws:ResourceAccount": "${aws:PrincipalAccount}"
                        }
                    }, 
                    "Sid": "CrossAccountKMSPermissions"
                }, 
                {
                    "Action": [
                        "kms:DescribeKey", 
                        "kms:ListGrants", 
                        "kms:GetPublicKey"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Condition": {
                        "StringLike": {
                            "kms:ViaService": [
                                "s3.*.amazonaws.com", 
                                "sqs.*.amazonaws.com", 
                                "sagemaker.*.amazonaws.com"
                            ]
                        }, 
                        "StringNotEquals": {
                            "aws:ResourceAccount": "${aws:PrincipalAccount}"
                        }
                    }, 
                    "Sid": "CrossAccountKMSManagementPermissions"
                }, 
                {
                    "Action": [
                        "kms:CreateGrant", 
                        "kms:Decrypt", 
                        "kms:GenerateDataKey"
                    ], 
                    "Resource": [
                        "*"
                    ], 
                    "Effect": "Allow", 
                    "Condition": {
                        "Null": {
                            "kms:EncryptionContextKeys": "false"
                        }, 
                        "StringLike": {
                            "kms:ViaService": [
                                "datazone.*.amazonaws.com"
                            ]
                        }
                    }, 
                    "Sid": "DataZoneKMSPermissions"
                }, 
                {
                    "Action": [
                        "kms:DescribeKey"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Condition": {
                        "StringLike": {
                            "kms:ViaService": [
                                "datazone.*.amazonaws.com"
                            ]
                        }
                    }, 
                    "Sid": "DataZoneDescribeKMSPermissions"
                }, 
                {
                    "Action": [
                        "s3:ListBucket", 
                        "s3:ListBucketVersions"
                    ], 
                    "Resource": "arn:aws:s3:::${aws:PrincipalTag/DomainBucketName}", 
                    "Effect": "Allow", 
                    "Condition": {
                        "StringEquals": {
                            "aws:ResourceAccount": "${aws:PrincipalAccount}"
                        }, 
                        "StringLike": {
                            "s3:prefix": [
                                "${aws:PrincipalTag/AmazonDataZoneDomain}/${aws:PrincipalTag/AmazonDataZoneProject}", 
                                "${aws:PrincipalTag/AmazonDataZoneDomain}/${aws:PrincipalTag/AmazonDataZoneProject}/*"
                            ]
                        }, 
                        "StringNotEquals": {
                            "aws:PrincipalTag/DomainBucketName": "", 
                            "aws:PrincipalTag/AmazonDataZoneProject": "", 
                            "aws:PrincipalTag/AmazonDataZoneDomain": ""
                        }
                    }, 
                    "Sid": "ListDomainS3BucketPermissions"
                }, 
                {
                    "Action": [
                        "s3:ListBucket"
                    ], 
                    "Resource": "arn:aws:s3:::${aws:PrincipalTag/DomainBucketName}", 
                    "Effect": "Allow", 
                    "Condition": {
                        "StringEquals": {
                            "aws:ResourceAccount": "${aws:PrincipalAccount}"
                        }, 
                        "StringNotEquals": {
                            "aws:PrincipalTag/DomainBucketName": ""
                        }
                    }, 
                    "Sid": "AirflowListDomainS3BucketPermissions"
                }, 
                {
                    "Action": [
                        "s3:ListBucket"
                    ], 
                    "Resource": [
                        "arn:aws:s3:::${aws:PrincipalTag/DomainBucketName}"
                    ], 
                    "Effect": "Allow", 
                    "Condition": {
                        "StringEquals": {
                            "aws:ResourceAccount": "${aws:PrincipalAccount}"
                        }, 
                        "ArnEquals": {
                            "lambda:SourceFunctionArn": "arn:aws:lambda:*:*:function:athenafederatedcatalog_*"
                        }
                    }, 
                    "Sid": "ListDomainBucketFromAthenaFederatedCatalog"
                }, 
                {
                    "Action": [
                        "s3:GetObject*", 
                        "s3:PutObject", 
                        "s3:PutObjectRetention", 
                        "s3:RestoreObject", 
                        "s3:ReplicateObject", 
                        "s3:DeleteObject", 
                        "s3:DeleteObjectVersion", 
                        "s3:ListMultipartUploadParts", 
                        "s3:AbortMultipartUpload"
                    ], 
                    "Resource": "arn:aws:s3:::${aws:PrincipalTag/DomainBucketName}/${aws:PrincipalTag/AmazonDataZoneDomain}/${aws:PrincipalTag/AmazonDataZoneProject}/*", 
                    "Effect": "Allow", 
                    "Condition": {
                        "StringEquals": {
                            "aws:ResourceAccount": "${aws:PrincipalAccount}"
                        }, 
                        "StringNotEquals": {
                            "aws:PrincipalTag/DomainBucketName": "", 
                            "aws:PrincipalTag/AmazonDataZoneProject": "", 
                            "aws:PrincipalTag/AmazonDataZoneDomain": ""
                        }
                    }, 
                    "Sid": "AccessDomainS3BucketPermissions"
                }, 
                {
                    "Action": "s3:GetObject", 
                    "Resource": "arn:aws:s3:::${aws:PrincipalTag/DomainBucketName}/${aws:PrincipalTag/AmazonDataZoneDomain}/certificate_location/*", 
                    "Effect": "Allow", 
                    "Condition": {
                        "Null": {
                            "aws:PrincipalTag/AmazonDataZoneProject": "false"
                        }, 
                        "StringEquals": {
                            "aws:ResourceAccount": "${aws:PrincipalAccount}"
                        }, 
                        "StringNotEquals": {
                            "aws:PrincipalTag/DomainBucketName": "", 
                            "aws:PrincipalTag/AmazonDataZoneDomain": ""
                        }
                    }, 
                    "Sid": "AccessCertificateS3LocationPermissions"
                }, 
                {
                    "Action": "s3:PutObjectTagging", 
                    "Resource": "arn:aws:s3:::${aws:PrincipalTag/DomainBucketName}/${aws:PrincipalTag/AmazonDataZoneDomain}/${aws:PrincipalTag/AmazonDataZoneProject}/genAI/assets/evaluations/*", 
                    "Effect": "Allow", 
                    "Condition": {
                        "StringEquals": {
                            "s3:RequestObjectTag/ContainsReferenceResponseForAllPrompts": [
                                "true", 
                                "false"
                            ], 
                            "s3:RequestObjectTag/BasicValidationStatus": [
                                "valid", 
                                "invalid"
                            ]
                        }, 
                        "StringNotEquals": {
                            "aws:PrincipalTag/DomainBucketName": "", 
                            "aws:PrincipalTag/AmazonDataZoneProject": "", 
                            "aws:PrincipalTag/AmazonDataZoneDomain": ""
                        }, 
                        "ForAllValues:StringEquals": {
                            "s3:RequestObjectTagKeys": [
                                "BasicValidationStatus", 
                                "ContainsReferenceResponseForAllPrompts"
                            ]
                        }
                    }, 
                    "Sid": "TagS3ObjectPermissionsForBedrockEvaluation"
                }, 
                {
                    "Action": [
                        "logs:DescribeLogGroups"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Sid": "CloudWatchDescribeLogGroups"
                }, 
                {
                    "Action": [
                        "logs:DescribeLogStreams", 
                        "logs:PutLogEvents", 
                        "logs:CreateLogStream", 
                        "logs:CreateLogGroup", 
                        "logs:StartQuery", 
                        "logs:FilterLogEvents", 
                        "logs:GetLogEvents", 
                        "logs:GetLogRecord", 
                        "logs:GetLogGroupFields", 
                        "logs:GetQueryResults"
                    ], 
                    "Resource": [
                        "arn:aws:logs:*:*:log-group:/aws/*", 
                        "arn:aws:logs:*:*:log-group:airflow*", 
                        "arn:aws:logs:*:*:log-group:datazone*"
                    ], 
                    "Effect": "Allow", 
                    "Sid": "CloudWatchLogsPermissions"
                }, 
                {
                    "Action": [
                        "logs:StopQuery"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Sid": "CloudWatchStopQuery"
                }, 
                {
                    "Action": [
                        "athena:GetDatabase", 
                        "athena:GetDataCatalog", 
                        "athena:GetTableMetadata", 
                        "athena:ListDatabases", 
                        "athena:ListDataCatalogs", 
                        "athena:ListEngineVersions", 
                        "athena:ListNamedQueries", 
                        "athena:ListPreparedStatements", 
                        "athena:ListQueryExecutions", 
                        "athena:ListTableMetadata", 
                        "athena:ListTagsForResource", 
                        "athena:ListWorkGroups"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Sid": "AthenaPermissions"
                }, 
                {
                    "Action": [
                        "athena:TerminateSession", 
                        "athena:CreatePreparedStatement", 
                        "athena:StopCalculationExecution", 
                        "athena:StartQueryExecution", 
                        "athena:UpdatePreparedStatement", 
                        "athena:BatchGetNamedQuery", 
                        "athena:BatchGetPreparedStatement", 
                        "athena:BatchGetQueryExecution", 
                        "athena:UpdateNotebook", 
                        "athena:DeleteNotebook", 
                        "athena:DeletePreparedStatement", 
                        "athena:UpdateNotebookMetadata", 
                        "athena:DeleteNamedQuery", 
                        "athena:GetCalculationExecution", 
                        "athena:GetCalculationExecutionCode", 
                        "athena:GetCalculationExecutionStatus", 
                        "athena:GetNamedQuery", 
                        "athena:GetNotebookMetadata", 
                        "athena:GetPreparedStatement", 
                        "athena:GetQueryExecution", 
                        "athena:GetQueryResults", 
                        "athena:GetQueryResultsStream", 
                        "athena:GetQueryRuntimeStatistics", 
                        "athena:GetSession", 
                        "athena:GetSessionStatus", 
                        "athena:GetWorkGroup", 
                        "athena:UpdateNamedQuery", 
                        "athena:CreateNamedQuery", 
                        "athena:ExportNotebook", 
                        "athena:StopQueryExecution", 
                        "athena:StartCalculationExecution", 
                        "athena:StartSession", 
                        "athena:CreatePresignedNotebookUrl", 
                        "athena:CreateNotebook", 
                        "athena:ImportNotebook", 
                        "athena:ListQueryExecutions", 
                        "athena:ListTagsForResource", 
                        "athena:ListNamedQueries", 
                        "athena:ListPreparedStatements"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Condition": {
                        "Null": {
                            "aws:ResourceTag/AmazonDataZoneProject": "false"
                        }
                    }, 
                    "Sid": "AthenaPermissionsWithResourceTag"
                }, 
                {
                    "Action": [
                        "datazone:CreateConnection", 
                        "datazone:DeleteConnection", 
                        "datazone:GetConnection", 
                        "datazone:GetDomain", 
                        "datazone:GetDomainExecutionRoleCredentials", 
                        "datazone:GetEnvironment", 
                        "datazone:GetEnvironmentBlueprintConfiguration", 
                        "datazone:GetProject", 
                        "datazone:GetUserProfile", 
                        "datazone:ListConnections", 
                        "datazone:ListEnvironments", 
                        "datazone:ListEnvironmentBlueprints", 
                        "datazone:ListProjects", 
                        "datazone:UpdateConnection"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Sid": "DataZonePermissions"
                }, 
                {
                    "Action": [
                        "glue:CreateTable", 
                        "glue:DeleteTable", 
                        "glue:BatchDeleteTable", 
                        "glue:UpdateTable", 
                        "glue:BatchCreatePartition", 
                        "glue:CreatePartition", 
                        "glue:DeletePartition", 
                        "glue:BatchDeletePartition", 
                        "glue:UpdatePartition", 
                        "glue:BatchGetPartition", 
                        "glue:BatchGetTableOptimizer", 
                        "glue:GetCatalogImportStatus", 
                        "glue:GetColumnStatisticsForPartition", 
                        "glue:GetColumnStatisticsForTable", 
                        "glue:GetColumnStatisticsTaskRun", 
                        "glue:GetColumnStatisticsTaskRuns", 
                        "glue:GetDatabase", 
                        "glue:GetDatabases", 
                        "glue:GetPartition", 
                        "glue:GetPartitionIndexes", 
                        "glue:GetPartitions", 
                        "glue:GetTable", 
                        "glue:GetTableOptimizer", 
                        "glue:GetTableVersion", 
                        "glue:GetTableVersions", 
                        "glue:GetTables", 
                        "glue:SearchTables", 
                        "glue:ListTableOptimizerRuns", 
                        "glue:CreatePartitionIndex", 
                        "glue:BatchUpdatePartition", 
                        "glue:DeleteTableVersion", 
                        "glue:DeleteColumnStatisticsForPartition", 
                        "glue:DeleteColumnStatisticsForTable", 
                        "glue:DeletePartitionIndex", 
                        "glue:UpdateColumnStatisticsForPartition", 
                        "glue:UpdateColumnStatisticsForTable", 
                        "glue:BatchDeleteTableVersion", 
                        "glue:GetCatalogs", 
                        "glue:GetCatalog", 
                        "glue:UpdateCatalog"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Sid": "GlueDatalakePermissions"
                }, 
                {
                    "Action": "glue:ListCrawls", 
                    "Resource": "arn:aws:glue:*:*:crawler/*", 
                    "Effect": "Allow", 
                    "Condition": {
                        "StringEquals": {
                            "aws:ResourceAccount": "${aws:PrincipalAccount}"
                        }
                    }, 
                    "Sid": "GlueCrawlerPermissions"
                }, 
                {
                    "Action": [
                        "glue:CreateDatabase", 
                        "glue:DeleteDatabase", 
                        "glue:GetDatabase"
                    ], 
                    "Resource": [
                        "arn:aws:glue:*:*:database/global_temp", 
                        "arn:aws:glue:*:*:catalog"
                    ], 
                    "Effect": "Allow", 
                    "Sid": "GlueGlobalTempDatabasePermissions"
                }, 
                {
                    "Action": [
                        "glue:CreateDatabase", 
                        "glue:DeleteDatabase", 
                        "glue:GetDatabase"
                    ], 
                    "Resource": [
                        "arn:aws:glue:*:*:database/*", 
                        "arn:aws:glue:*:*:catalog/*"
                    ], 
                    "Effect": "Allow", 
                    "Sid": "GlueCatalogDatabasePermissions"
                }, 
                {
                    "Action": [
                        "glue:GetClassifier", 
                        "glue:GetClassifiers", 
                        "glue:GetConnection", 
                        "glue:GetConnections", 
                        "glue:GetDatabase", 
                        "glue:GetDatabases", 
                        "glue:UseGlueStudio", 
                        "glue:ListSessions", 
                        "glue:StartCompletion", 
                        "glue:GetCompletion", 
                        "glue:GetGeneratedCode", 
                        "glue:GetTags"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Sid": "GlueUnrestrictedPermissions"
                }, 
                {
                    "Action": [
                        "glue:PassConnection", 
                        "glue:GetSession", 
                        "glue:GetStatement", 
                        "glue:CancelStatement", 
                        "glue:ListStatements", 
                        "glue:TagResource", 
                        "glue:UntagResource", 
                        "glue:DeleteSession", 
                        "glue:RunStatement", 
                        "glue:StopSession", 
                        "glue:GetDashboardUrl", 
                        "glue:NotifyEvent", 
                        "glue:StartBlueprintRun", 
                        "glue:PutWorkflowRunProperties", 
                        "glue:DeleteJob", 
                        "glue:DeleteWorkflow", 
                        "glue:DeleteBlueprint", 
                        "glue:UpdateWorkflow", 
                        "glue:UpdateJob", 
                        "glue:StartWorkflowRun", 
                        "glue:ResumeWorkflowRun", 
                        "glue:UpdateBlueprint", 
                        "glue:BatchStopJobRun", 
                        "glue:StopWorkflowRun", 
                        "glue:StartJobRun", 
                        "glue:CancelDataQualityRuleRecommendationRun", 
                        "glue:CancelDataQualityRulesetEvaluationRun", 
                        "glue:DeleteDataQualityRuleset", 
                        "glue:GetDataQualityModel", 
                        "glue:GetDataQualityModelResult", 
                        "glue:GetDataQualityResult", 
                        "glue:GetDataQualityRuleRecommendationRun", 
                        "glue:GetDataQualityRuleset", 
                        "glue:GetDataQualityRulesetEvaluationRun", 
                        "glue:ListDataQualityResults", 
                        "glue:ListDataQualityRuleRecommendationRuns", 
                        "glue:ListDataQualityRulesetEvaluationRuns", 
                        "glue:ListDataQualityRulesets", 
                        "glue:PublishDataQuality", 
                        "glue:PutDataQualityProfileAnnotation", 
                        "glue:PutDataQualityStatisticAnnotation", 
                        "glue:StartDataQualityRuleRecommendationRun", 
                        "glue:StartDataQualityRulesetEvaluationRun", 
                        "glue:UpdateDataQualityRuleset"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Condition": {
                        "Null": {
                            "aws:ResourceTag/AmazonDataZoneProject": "false"
                        }
                    }, 
                    "Sid": "GluePermissionsWithResourceTag"
                }, 
                {
                    "Action": [
                        "glue:CreateSession", 
                        "glue:CreateBlueprint", 
                        "glue:CreateJob", 
                        "glue:CreateDataQualityRuleset", 
                        "glue:CreateWorkflow", 
                        "glue:TagResource"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Condition": {
                        "Null": {
                            "aws:ResourceTag/AmazonDataZoneProject": "false"
                        }
                    }, 
                    "Sid": "GlueCreateAndTagPermissions"
                }, 
                {
                    "Action": [
                        "iam:ListRoles"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Sid": "IAMListRoles"
                }, 
                {
                    "Action": [
                        "iam:GetRole"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Condition": {
                        "StringEquals": {
                            "aws:ResourceAccount": "${aws:PrincipalAccount}"
                        }
                    }, 
                    "Sid": "IAMGetRole"
                }, 
                {
                    "Action": [
                        "iam:PassRole"
                    ], 
                    "Resource": [
                        "arn:aws:iam::*:role/datazone*"
                    ], 
                    "Effect": "Allow", 
                    "Condition": {
                        "StringEquals": {
                            "iam:PassedToService": [
                                "glue.amazonaws.com", 
                                "sagemaker.amazonaws.com", 
                                "ec2.amazonaws.com", 
                                "emr-serverless.amazonaws.com"
                            ]
                        }
                    }, 
                    "Sid": "IAMPassRolePermission"
                }, 
                {
                    "Action": [
                        "redshift-data:DescribeStatement", 
                        "redshift-data:GetStatementResult", 
                        "redshift-data:CancelStatement", 
                        "redshift-data:ListStatements"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Condition": {
                        "StringEquals": {
                            "redshift-data:statement-owner-iam-userid": "${aws:userid}"
                        }
                    }, 
                    "Sid": "RedshiftDataActionsIAMSessionRestriction"
                }, 
                {
                    "Action": [
                        "redshift-serverless:ListNamespaces", 
                        "redshift-serverless:ListWorkgroups", 
                        "redshift:DescribeClusters", 
                        "sqlworkbench:PutTab", 
                        "sqlworkbench:DeleteTab", 
                        "sqlworkbench:DriverExecute", 
                        "sqlworkbench:GetUserInfo", 
                        "sqlworkbench:ListTabs", 
                        "sqlworkbench:GetAutocompletionMetadata", 
                        "sqlworkbench:GetAutocompletionResource", 
                        "sqlworkbench:PassAccountSettings", 
                        "sqlworkbench:ListQueryExecutionHistory", 
                        "sqlworkbench:GetQueryExecutionHistory", 
                        "sqlworkbench:CreateConnection", 
                        "sqlworkbench:PutQCustomContext", 
                        "sqlworkbench:GetQCustomContext", 
                        "sqlworkbench:DeleteQCustomContext", 
                        "sqlworkbench:GetQSqlRecommendations", 
                        "sqlworkbench:GetQSqlPromptQuotas", 
                        "tag:GetResources"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Sid": "RedshiftUnrestrictedPermissions"
                }, 
                {
                    "Action": [
                        "redshift-serverless:GetNamespace", 
                        "redshift-serverless:GetWorkgroup", 
                        "redshift-serverless:ListTagsForResource", 
                        "redshift:DescribeTags"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Condition": {
                        "Null": {
                            "aws:ResourceTag/AmazonDataZoneProject": "false"
                        }
                    }, 
                    "Sid": "RedshiftPermissionsWithResourceTag"
                }, 
                {
                    "Action": [
                        "redshift-serverless:GetWorkgroup", 
                        "redshift-serverless:GetNamespace", 
                        "redshift-serverless:ListTagsForResource", 
                        "redshift-serverless:GetCredentials", 
                        "redshift:DescribeTags", 
                        "redshift:GetClusterCredentialsWithIAM", 
                        "redshift-data:BatchExecuteStatement", 
                        "redshift-data:ExecuteStatement", 
                        "redshift-data:DescribeTable", 
                        "redshift-data:ListDatabases", 
                        "redshift-data:ListSchemas", 
                        "redshift-data:ListTables"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Condition": {
                        "StringEquals": {
                            "aws:ResourceTag/for-use-with-all-datazone-projects": "true"
                        }
                    }, 
                    "Sid": "AllowAccessExistingRedshiftCompute"
                }, 
                {
                    "Action": [
                        "redshift-data:BatchExecuteStatement", 
                        "redshift-data:ExecuteStatement", 
                        "redshift-data:DescribeStatement", 
                        "redshift-data:GetStatementResult", 
                        "redshift-data:CancelStatement", 
                        "redshift-data:GetStagingBucketLocation", 
                        "redshift-serverless:GetManagedWorkgroup"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Condition": {
                        "StringLike": {
                            "redshift-data:glue-catalog-arn": "arn:aws:glue:*:*:catalog/*"
                        }
                    }, 
                    "Sid": "RedshiftDataActionsForManagedWorkgroup"
                }, 
                {
                    "Action": [
                        "redshift-serverless:GetCredentials"
                    ], 
                    "Resource": "arn:aws:redshift-serverless:*:*:workgroup/*", 
                    "Effect": "Allow", 
                    "Condition": {
                        "ForAnyValue:StringEquals": {
                            "aws:CalledVia": "redshift-data.amazonaws.com"
                        }, 
                        "Bool": {
                            "aws:ViaAWSService": "true"
                        }
                    }, 
                    "Sid": "RedshifServerlessCredentialsForManagedWorkgroup"
                }, 
                {
                    "Action": [
                        "redshift:GetClusterCredentialsWithIAM"
                    ], 
                    "Resource": "arn:aws:redshift:*:*:dbname:*/*", 
                    "Effect": "Allow", 
                    "Condition": {
                        "Bool": {
                            "aws:ViaAWSService": "true"
                        }
                    }, 
                    "Sid": "RedshiftExistingComputeConnectToCatalog"
                }, 
                {
                    "Action": [
                        "codewhisperer:GenerateRecommendations"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Sid": "GenerativeAIPermissions"
                }, 
                {
                    "Action": [
                        "bedrock:GetInferenceProfile", 
                        "bedrock:InvokeModel", 
                        "bedrock:InvokeModelWithResponseStream"
                    ], 
                    "Resource": "arn:aws:bedrock:*:*:application-inference-profile/*", 
                    "Effect": "Allow", 
                    "Condition": {
                        "Null": {
                            "aws:ResourceTag/AmazonDataZoneProject": "false"
                        }
                    }, 
                    "Sid": "BedrockAppInferenceProfileInvocationPermissions"
                }, 
                {
                    "Action": [
                        "bedrock:InvokeModel", 
                        "bedrock:InvokeModelWithResponseStream"
                    ], 
                    "Resource": [
                        "arn:aws:bedrock:*:*:*-model/*"
                    ], 
                    "Effect": "Allow", 
                    "Condition": {
                        "Null": {
                            "bedrock:InferenceProfileArn": "false"
                        }
                    }, 
                    "Sid": "BedrockModelInvocationPermissions"
                }, 
                {
                    "Action": [
                        "ec2:AttachNetworkInterface", 
                        "ec2:CreateNetworkInterface", 
                        "ec2:CreateNetworkInterfacePermission", 
                        "ec2:CreateTags", 
                        "ec2:CreateVpcEndpoint", 
                        "ec2:DescribeNetworkInterfaces", 
                        "ec2:DescribeDhcpOptions", 
                        "ec2:DescribeVpcs", 
                        "ec2:DescribeVpcEndpoints", 
                        "ec2:DescribeSubnets", 
                        "ec2:DescribeRouteTables", 
                        "ec2:DescribeSecurityGroups", 
                        "ec2:DeleteNetworkInterface", 
                        "ec2:DetachNetworkInterface", 
                        "ec2:DeleteNetworkInterfacePermission", 
                        "ec2:DeleteTags"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Sid": "ManageNetworkPermissions"
                }, 
                {
                    "Action": [
                        "sagemaker:ListImageVersions", 
                        "sagemaker:ListTrainingJobs", 
                        "sagemaker:ListTransformJobs", 
                        "sagemaker:ListProcessingJobs", 
                        "sagemaker:ListAutoMLJobs", 
                        "sagemaker:ListCandidatesForAutoMLJob", 
                        "sagemaker:ListContexts", 
                        "sagemaker:ListHyperParameterTuningJobs", 
                        "sagemaker:ListTrainingJobsForHyperParameterTuningJob", 
                        "sagemaker:ListInferenceComponents", 
                        "sagemaker:ListEndpoints", 
                        "sagemaker:ListEndpointConfigs", 
                        "sagemaker:ListModels", 
                        "sagemaker:ListModelPackages", 
                        "sagemaker:ListModelPackageGroups", 
                        "sagemaker:ListModelMetadata", 
                        "sagemaker:ListMlflowTrackingServers", 
                        "sagemaker:ListArtifacts", 
                        "sagemaker:ListAssociations", 
                        "sagemaker:ListHubContents", 
                        "sagemaker:ListHubs", 
                        "sagemaker:ListPipelineExecutionSteps", 
                        "sagemaker:ListPipelineExecutions", 
                        "sagemaker:ListPipelineParametersForExecution", 
                        "sagemaker:ListPipelines", 
                        "sagemaker:ListApps", 
                        "sagemaker:ListDomains", 
                        "sagemaker:ListUserProfiles", 
                        "sagemaker:ListSpaces", 
                        "sagemaker:ListTags", 
                        "sagemaker:DescribeMlflowTrackingServer", 
                        "sagemaker:DescribeImageVersion", 
                        "sagemaker:DescribeImage", 
                        "sagemaker:DescribeInferenceComponent", 
                        "sagemaker:DescribeEndpointConfig", 
                        "sagemaker:DescribeModel", 
                        "sagemaker:DescribeOptimizationJob", 
                        "sagemaker:DescribeEndpoint", 
                        "sagemaker:DescribeInferenceRecommendationsJob", 
                        "sagemaker:DescribeModelPackage", 
                        "sagemaker:DescribeModelPackageGroup", 
                        "sagemaker:DescribePipeline", 
                        "sagemaker:DescribePipelineExecution", 
                        "sagemaker:DescribePipelineDefinitionForExecution", 
                        "sagemaker:DescribeHyperParameterTuningJob", 
                        "sagemaker:DescribeAutoMLJob", 
                        "sagemaker:DescribeProcessingJob", 
                        "sagemaker:DescribeTrainingJob", 
                        "sagemaker:DescribeAction", 
                        "sagemaker:DescribeArtifact", 
                        "sagemaker:DescribeTrialComponent", 
                        "sagemaker:DescribeContext", 
                        "sagemaker:DescribeDomain", 
                        "sagemaker:DescribeApp", 
                        "sagemaker:DescribeUserProfile", 
                        "sagemaker:DescribeSpace", 
                        "sagemaker:AddTags", 
                        "sagemaker:AddAssociation", 
                        "sagemaker:DeleteAssociation", 
                        "sagemaker:DeleteContext", 
                        "sagemaker:DeleteAction", 
                        "sagemaker:DeleteArtifact", 
                        "sagemaker:DeleteUserProfile", 
                        "sagemaker:UpdateSpace", 
                        "sagemaker:DeleteSpace", 
                        "sagemaker:DeleteApp", 
                        "sagemaker:CreatePresignedDomainUrl", 
                        "sagemaker:CreateUserProfile", 
                        "sagemaker:CreateSpace", 
                        "sagemaker:CreateApp", 
                        "sagemaker:CreateTrainingJob", 
                        "sagemaker:CreateTransformJob", 
                        "sagemaker:CreateProcessingJob", 
                        "sagemaker:CreateAutoMLJob", 
                        "sagemaker:CreateAutoMLJobV2", 
                        "sagemaker:CreateHyperParameterTuningJob", 
                        "sagemaker:CreateEndpointConfig", 
                        "sagemaker:CreateEndpoint", 
                        "sagemaker:CreateModel", 
                        "sagemaker:CreateModelPackage", 
                        "sagemaker:CreateModelPackageGroup", 
                        "sagemaker:CreatePipeline", 
                        "sagemaker:CreateContext", 
                        "sagemaker:CreateArtifact", 
                        "sagemaker:CreateAction", 
                        "sagemaker:CreateInferenceComponent", 
                        "sagemaker:UpdateInferenceComponentRuntimeConfig", 
                        "sagemaker:StopTrainingJob", 
                        "sagemaker:StopProcessingJob", 
                        "sagemaker:StopAutoMLJob", 
                        "sagemaker:StopHyperParameterTuningJob", 
                        "sagemaker:DescribeTransformJob", 
                        "sagemaker:StopTransformJob", 
                        "sagemaker:UpdateTrainingJob", 
                        "sagemaker:BatchGetMetrics", 
                        "sagemaker:BatchPutMetrics", 
                        "sagemaker:DeleteEndpointConfig", 
                        "sagemaker:DeleteEndpoint", 
                        "sagemaker:UpdateEndpoint", 
                        "sagemaker:UpdateEndpointWeightsAndCapacities", 
                        "sagemaker:BatchDescribeModelPackage", 
                        "sagemaker:UpdateModelPackage", 
                        "sagemaker:DeleteModel", 
                        "sagemaker:DeleteModelPackage", 
                        "sagemaker:DeleteModelPackageGroup", 
                        "sagemaker:DeleteTags", 
                        "sagemaker:DeleteInferenceComponent", 
                        "sagemaker:CreateInferenceRecommendationsJob", 
                        "sagemaker:InvokeEndpoint", 
                        "sagemaker:InvokeEndpointAsync", 
                        "sagemaker:InvokeEndpointWithResponseStream", 
                        "sagemaker:QueryLineage", 
                        "sagemaker:UpdatePipeline", 
                        "sagemaker:DeletePipeline", 
                        "sagemaker:UpdatePipelineExecution", 
                        "sagemaker:StartPipelineExecution", 
                        "sagemaker:StopPipelineExecution", 
                        "sagemaker:RetryPipelineExecution", 
                        "sagemaker:SendPipelineExecutionStepSuccess", 
                        "sagemaker:SendPipelineExecutionStepFailure", 
                        "sagemaker:GetSearchSuggestions", 
                        "sagemaker:Search", 
                        "sagemaker:UpdateMlflowTrackingServer", 
                        "sagemaker:StartMlflowTrackingServer", 
                        "sagemaker:StopMlflowTrackingServer", 
                        "sagemaker:CreatePresignedMlflowTrackingServerUrl", 
                        "sagemaker:ListPartnerApps", 
                        "sagemaker:CreatePartnerAppPresignedUrl", 
                        "sagemaker:DescribePartnerApp", 
                        "sagemaker:CallPartnerAppApi", 
                        "sagemaker-mlflow:AccessUI", 
                        "sagemaker-mlflow:CreateExperiment", 
                        "sagemaker-mlflow:SearchExperiments", 
                        "sagemaker-mlflow:GetExperiment", 
                        "sagemaker-mlflow:GetExperimentByName", 
                        "sagemaker-mlflow:DeleteExperiment", 
                        "sagemaker-mlflow:RestoreExperiment", 
                        "sagemaker-mlflow:UpdateExperiment", 
                        "sagemaker-mlflow:CreateRun", 
                        "sagemaker-mlflow:DeleteRun", 
                        "sagemaker-mlflow:RestoreRun", 
                        "sagemaker-mlflow:GetRun", 
                        "sagemaker-mlflow:LogMetric", 
                        "sagemaker-mlflow:LogBatch", 
                        "sagemaker-mlflow:LogModel", 
                        "sagemaker-mlflow:LogInputs", 
                        "sagemaker-mlflow:SetExperimentTag", 
                        "sagemaker-mlflow:SetTag", 
                        "sagemaker-mlflow:DeleteTag", 
                        "sagemaker-mlflow:LogParam", 
                        "sagemaker-mlflow:GetMetricHistory", 
                        "sagemaker-mlflow:SearchRuns", 
                        "sagemaker-mlflow:ListArtifacts", 
                        "sagemaker-mlflow:UpdateRun", 
                        "sagemaker-mlflow:CreateRegisteredModel", 
                        "sagemaker-mlflow:GetRegisteredModel", 
                        "sagemaker-mlflow:RenameRegisteredModel", 
                        "sagemaker-mlflow:UpdateRegisteredModel", 
                        "sagemaker-mlflow:DeleteRegisteredModel", 
                        "sagemaker-mlflow:GetLatestModelVersions", 
                        "sagemaker-mlflow:CreateModelVersion", 
                        "sagemaker-mlflow:GetModelVersion", 
                        "sagemaker-mlflow:UpdateModelVersion", 
                        "sagemaker-mlflow:DeleteModelVersion", 
                        "sagemaker-mlflow:SearchModelVersions", 
                        "sagemaker-mlflow:GetDownloadURIForModelVersionArtifacts", 
                        "sagemaker-mlflow:TransitionModelVersionStage", 
                        "sagemaker-mlflow:SearchRegisteredModels", 
                        "sagemaker-mlflow:SetRegisteredModelTag", 
                        "sagemaker-mlflow:DeleteRegisteredModelTag", 
                        "sagemaker-mlflow:DeleteModelVersionTag", 
                        "sagemaker-mlflow:DeleteRegisteredModelAlias", 
                        "sagemaker-mlflow:SetRegisteredModelAlias", 
                        "sagemaker-mlflow:GetModelVersionByAlias", 
                        "ecr:GetAuthorizationToken", 
                        "ecr:BatchGetImage", 
                        "ecr:GetDownloadUrlForLayer", 
                        "ecr:DescribeImages", 
                        "elasticfilesystem:DescribeMountTargets", 
                        "ssm:GetParameter", 
                        "ssm:GetParameters", 
                        "ssm:GetParametersByPath", 
                        "ec2:DescribeInstanceTypes"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Sid": "SageMakerPermissions"
                }, 
                {
                    "Action": "iam:CreateServiceLinkedRole", 
                    "Resource": "arn:aws:iam::*:role/aws-service-role/sagemaker.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_SageMakerEndpoint", 
                    "Effect": "Allow", 
                    "Condition": {
                        "StringLike": {
                            "iam:AWSServiceName": "sagemaker.application-autoscaling.amazonaws.com"
                        }
                    }, 
                    "Sid": "SageMakerSLRForAutoScalingPermissions"
                }, 
                {
                    "Action": [
                        "cloudwatch:PutMetricData", 
                        "cloudwatch:GetMetricStatistics", 
                        "cloudwatch:GetMetricData", 
                        "sts:GetCallerIdentity", 
                        "sts:TagSession", 
                        "emr-serverless:GetApplication", 
                        "emr-serverless:GetDashboardForJobRun", 
                        "emr-serverless:GetJobRun", 
                        "emr-serverless:ListApplications", 
                        "emr-serverless:ListJobRunAttempts", 
                        "emr-serverless:ListJobRuns", 
                        "emr-serverless:StartApplication", 
                        "emr-serverless:StartJobRun", 
                        "emr-serverless:StopApplication", 
                        "emr-serverless:AccessInteractiveEndpoints", 
                        "emr-serverless:AccessLivyEndpoints", 
                        "elasticmapreduce:ListReleaseLabels", 
                        "elasticmapreduce:ListSupportedInstanceTypes", 
                        "elasticmapreduce:ListClusters", 
                        "elasticmapreduce:CreatePersistentAppUI", 
                        "elasticmapreduce:DescribePersistentAppUI", 
                        "elasticmapreduce:GetPersistentAppUIPresignedURL", 
                        "pricing:GetProducts"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Sid": "ComputePermissions"
                }, 
                {
                    "Action": [
                        "sts:AssumeRole"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Condition": {
                        "StringNotEquals": {
                            "aws:PrincipalTag/AmazonDataZoneProject": ""
                        }
                    }, 
                    "Sid": "AllowAssumeAccessRole"
                }, 
                {
                    "Action": "sts:SetSourceIdentity", 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Condition": {
                        "StringLike": {
                            "sts:SourceIdentity": "${aws:PrincipalTag/datazone:userId}"
                        }
                    }, 
                    "Sid": "SetSourceIdentityForAssumeAccessRole"
                }, 
                {
                    "Action": "secretsmanager:ListSecrets", 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Sid": "AllowListSecrets"
                }, 
                {
                    "Action": [
                        "secretsmanager:GetSecretValue", 
                        "ec2:AuthorizeSecurityGroupEgress", 
                        "ec2:AuthorizeSecurityGroupIngress", 
                        "ec2:RevokeSecurityGroupEgress", 
                        "ec2:RevokeSecurityGroupIngress", 
                        "redshift-serverless:GetWorkgroup", 
                        "redshift-serverless:GetNamespace", 
                        "redshift-serverless:ListTagsForResource", 
                        "redshift-serverless:GetCredentials", 
                        "redshift-data:BatchExecuteStatement", 
                        "redshift-data:ExecuteStatement", 
                        "redshift-data:DescribeTable", 
                        "redshift-data:ListDatabases", 
                        "redshift-data:ListSchemas", 
                        "redshift-data:ListTables", 
                        "elasticmapreduce:GetClusterSessionCredentials", 
                        "elasticmapreduce:GetManagedScalingPolicy", 
                        "elasticmapreduce:GetOnClusterAppUIPresignedURL", 
                        "elasticmapreduce:DescribeCluster", 
                        "elasticmapreduce:ListInstances", 
                        "elasticmapreduce:ListInstanceFleets", 
                        "elasticmapreduce:ListInstanceGroups", 
                        "elasticmapreduce:ListBootstrapActions", 
                        "elasticmapreduce:TerminateJobFlows", 
                        "redshift:GetClusterCredentialsWithIAM"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Condition": {
                        "Null": {
                            "aws:ResourceTag/AmazonDataZoneProject": "false"
                        }
                    }, 
                    "Sid": "ComputePermissionsWithResourceTag"
                }, 
                {
                    "Action": [
                        "lakeformation:GetDataAccess"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Sid": "DataLakePermissions"
                }, 
                {
                    "Action": [
                        "codecommit:BatchGetCommits", 
                        "codecommit:BatchGetPullRequests", 
                        "codecommit:BatchGetRepositories", 
                        "codecommit:BatchDescribeMergeConflicts", 
                        "codecommit:CreateBranch", 
                        "codecommit:CreateCommit", 
                        "codecommit:CreatePullRequest", 
                        "codecommit:DeleteBranch", 
                        "codecommit:DeleteFile", 
                        "codecommit:DescribeMergeConflicts", 
                        "codecommit:DescribePullRequestEvents", 
                        "codecommit:GetBlob", 
                        "codecommit:GetBranch", 
                        "codecommit:GetComment", 
                        "codecommit:GetCommentReactions", 
                        "codecommit:GetCommentsForComparedCommit", 
                        "codecommit:GetCommentsForPullRequest", 
                        "codecommit:GetCommit", 
                        "codecommit:GetCommitHistory", 
                        "codecommit:GetCommitsFromMergeBase", 
                        "codecommit:GetDifferences", 
                        "codecommit:GetFile", 
                        "codecommit:GetFolder", 
                        "codecommit:GetMergeCommit", 
                        "codecommit:GetMergeConflicts", 
                        "codecommit:GetMergeOptions", 
                        "codecommit:GetObjectIdentifier", 
                        "codecommit:GetPullRequest", 
                        "codecommit:GetPullRequestApprovalStates", 
                        "codecommit:GetPullRequestOverrideState", 
                        "codecommit:GetReferences", 
                        "codecommit:GetRepository", 
                        "codecommit:GetRepositoryTriggers", 
                        "codecommit:GetTree", 
                        "codecommit:GetUploadArchiveStatus", 
                        "codecommit:GitPull", 
                        "codecommit:GitPush", 
                        "codecommit:ListAssociatedApprovalRuleTemplatesForRepository", 
                        "codecommit:ListBranches", 
                        "codecommit:ListFileCommitHistory", 
                        "codecommit:ListPullRequests", 
                        "codecommit:ListTagsForResource", 
                        "codecommit:MergeBranchesByFastForward", 
                        "codecommit:MergeBranchesBySquash", 
                        "codecommit:MergeBranchesByThreeWay", 
                        "codecommit:MergePullRequestByFastForward", 
                        "codecommit:MergePullRequestBySquash", 
                        "codecommit:MergePullRequestByThreeWay", 
                        "codecommit:UpdateComment", 
                        "codecommit:UpdateDefaultBranch", 
                        "codecommit:UpdatePullRequestApprovalRuleContent", 
                        "codecommit:UpdatePullRequestApprovalState", 
                        "codecommit:UpdatePullRequestDescription", 
                        "codecommit:UpdatePullRequestStatus", 
                        "codecommit:UpdatePullRequestTitle", 
                        "codecommit:UpdateRepositoryDescription", 
                        "codecommit:PostCommentForComparedCommit", 
                        "codecommit:PostCommentForPullRequest", 
                        "codecommit:PostCommentReply", 
                        "codecommit:PutCommentReaction", 
                        "codecommit:PutFile"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Condition": {
                        "Null": {
                            "aws:ResourceTag/AmazonDataZoneProject": "false"
                        }
                    }, 
                    "Sid": "CodeCommitPermissions"
                }, 
                {
                    "Action": [
                        "application-autoscaling:DeleteScalingPolicy", 
                        "application-autoscaling:DeregisterScalableTarget", 
                        "application-autoscaling:DescribeScalableTargets", 
                        "application-autoscaling:DescribeScalingPolicies", 
                        "application-autoscaling:PutScalingPolicy", 
                        "application-autoscaling:RegisterScalableTarget", 
                        "application-autoscaling:DeleteScheduledAction", 
                        "application-autoscaling:DescribeScalingActivities", 
                        "application-autoscaling:DescribeScheduledActions", 
                        "application-autoscaling:PutScheduledAction", 
                        "cloudwatch:PutMetricAlarm", 
                        "cloudwatch:DeleteAlarms", 
                        "cloudwatch:DescribeAlarms", 
                        "ec2:RunInstances", 
                        "ec2:CreateFleet", 
                        "ec2:CreateLaunchTemplate", 
                        "ec2:CreateLaunchTemplateVersion", 
                        "ec2:CreatePlacementGroup", 
                        "ec2:CreateSecurityGroup", 
                        "ec2:DeleteLaunchTemplate", 
                        "ec2:DeletePlacementGroup", 
                        "ec2:ModifyInstanceAttribute", 
                        "ec2:TerminateInstances", 
                        "ec2:DescribeAccountAttributes", 
                        "ec2:DescribeCapacityReservations", 
                        "ec2:DescribeImages", 
                        "ec2:DescribeInstances", 
                        "ec2:DescribeInstanceTypeOfferings", 
                        "ec2:DescribeLaunchTemplates", 
                        "ec2:DescribeNetworkAcls", 
                        "ec2:DescribePlacementGroups", 
                        "ec2:DescribeVolumes", 
                        "ec2:DescribeVolumeStatus", 
                        "ec2:DescribeVpcAttribute", 
                        "resource-groups:ListGroupResources"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Sid": "EMRServicePermissions"
                }, 
                {
                    "Action": [
                        "resource-groups:GetGroupQuery"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Sid": "ModelRegistryResourceGroupGetPermissions"
                }, 
                {
                    "Action": [
                        "resource-groups:CreateGroup", 
                        "resource-groups:DeleteGroup", 
                        "resource-groups:Tag"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Condition": {
                        "Null": {
                            "aws:ResourceTag/sagemaker:collection": "false"
                        }
                    }, 
                    "Sid": "ModelRegistryResourceGroupMutatePermissions"
                }, 
                {
                    "Action": [
                        "bedrock:ListFoundationModels"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Sid": "ModelRegistryBedRockPermissions"
                }, 
                {
                    "Action": "aoss:APIAccessAll", 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Sid": "AccessAossCollectionsForBedrock"
                }, 
                {
                    "Action": [
                        "bedrock:GetAgent", 
                        "bedrock:GetAgentActionGroup", 
                        "bedrock:GetAgentKnowledgeBase", 
                        "bedrock:InvokeAgent", 
                        "bedrock:ListAgentActionGroups", 
                        "bedrock:ListAgentKnowledgeBases", 
                        "bedrock:Retrieve", 
                        "bedrock:StartIngestionJob", 
                        "bedrock:GetIngestionJob", 
                        "bedrock:ListIngestionJobs", 
                        "bedrock:ApplyGuardrail", 
                        "bedrock:ListPrompts", 
                        "bedrock:GetPrompt", 
                        "bedrock:CreatePrompt", 
                        "bedrock:DeletePrompt", 
                        "bedrock:CreatePromptVersion", 
                        "bedrock:InvokeFlow", 
                        "bedrock:GetEvaluationJob", 
                        "bedrock:CreateEvaluationJob", 
                        "bedrock:StopEvaluationJob", 
                        "bedrock:BatchDeleteEvaluationJob", 
                        "bedrock:ListTagsForResource", 
                        "bedrock:CreateAgentAlias", 
                        "bedrock:ListAgentAliases", 
                        "bedrock:GetAgentVersion", 
                        "bedrock:ListAgentVersions", 
                        "bedrock:DeleteAgentVersion", 
                        "bedrock:DeleteAgentAlias", 
                        "bedrock:GetAgentAlias", 
                        "bedrock:UpdateAgentAlias"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Condition": {
                        "StringEquals": {
                            "aws:ResourceTag/AmazonDataZoneProject": "${aws:PrincipalTag/AmazonDataZoneProject}"
                        }
                    }, 
                    "Sid": "AccessBedrockResources"
                }, 
                {
                    "Action": "bedrock:CreateEvaluationJob", 
                    "Resource": [
                        "arn:aws:bedrock:*::foundation-model/*", 
                        "arn:aws:bedrock:*:*:custom-model/*"
                    ], 
                    "Effect": "Allow", 
                    "Sid": "CreateEvaluationJobForFoundationModel"
                }, 
                {
                    "Action": "bedrock:InvokeInlineAgent", 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Sid": "InvokeBedrockInlineAgentPermissions"
                }, 
                {
                    "Action": "bedrock:RetrieveAndGenerate", 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Sid": "BedrockRetrieveAndGeneratePermissions"
                }, 
                {
                    "Action": "bedrock:ListEvaluationJobs", 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Sid": "ListBedrockEvaluationJobPermissions"
                }, 
                {
                    "Action": [
                        "iam:PassRole"
                    ], 
                    "Resource": [
                        "arn:aws:iam::*:role/AmazonBedrockEvaluationRole-${aws:PrincipalTag/AmazonDataZoneProject}-*"
                    ], 
                    "Effect": "Allow", 
                    "Condition": {
                        "StringEquals": {
                            "iam:PassedToService": [
                                "bedrock.amazonaws.com"
                            ]
                        }
                    }, 
                    "Sid": "PassRoleToBedrockEvaluation"
                }, 
                {
                    "Action": "bedrock:TagResource", 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Condition": {
                        "StringEquals": {
                            "aws:ResourceTag/AmazonDataZoneProject": "${aws:PrincipalTag/AmazonDataZoneProject}"
                        }
                    }, 
                    "Sid": "TagBedrockResourcePermissions"
                }, 
                {
                    "Action": [
                        "kms:GenerateDataKey", 
                        "kms:Decrypt"
                    ], 
                    "Resource": "arn:aws:kms:*:*:key/${aws:PrincipalTag/KmsKeyId}", 
                    "Effect": "Allow", 
                    "Condition": {
                        "Null": {
                            "kms:ViaService": "true", 
                            "kms:EncryptionContext:aws:bedrock:arn": "false"
                        }, 
                        "StringEquals": {
                            "aws:PrincipalTag/AmazonBedrockManaged": "true"
                        }
                    }, 
                    "Sid": "BedrockKnowledgeBaseDataIngestionKmsPermissions"
                }, 
                {
                    "Action": [
                        "secretsmanager:DescribeSecret", 
                        "secretsmanager:GetSecretValue", 
                        "secretsmanager:PutSecretValue"
                    ], 
                    "Resource": "arn:aws:secretsmanager:*:*:secret:amazon-bedrock-ide/*", 
                    "Effect": "Allow", 
                    "Condition": {
                        "StringEquals": {
                            "aws:ResourceTag/AmazonDataZoneProject": "${aws:PrincipalTag/AmazonDataZoneProject}"
                        }
                    }, 
                    "Sid": "AccessSecretPermissionsForBedrockApp"
                }, 
                {
                    "Action": "lambda:InvokeFunction", 
                    "Resource": "arn:aws:lambda:*:*:function:amazon-bedrock-ide-*", 
                    "Effect": "Allow", 
                    "Condition": {
                        "StringEquals": {
                            "aws:ResourceTag/AmazonDataZoneProject": "${aws:PrincipalTag/AmazonDataZoneProject}"
                        }
                    }, 
                    "Sid": "InvokeFunctionPermissionsForBedrockApp"
                }, 
                {
                    "Action": [
                        "cloudformation:GetTemplate", 
                        "cloudformation:DescribeStacks"
                    ], 
                    "Resource": "arn:aws:cloudformation:*:*:stack/DataZone-Env-*", 
                    "Effect": "Allow", 
                    "Condition": {
                        "StringEquals": {
                            "aws:ResourceTag/AmazonDataZoneProject": "${aws:PrincipalTag/AmazonDataZoneProject}"
                        }
                    }, 
                    "Sid": "GetDataZoneEnvironmentCfnStackPermissionsForBedrockAppExport"
                }, 
                {
                    "Action": [
                        "airflow:ListEnvironments", 
                        "airflow:GetEnvironment", 
                        "airflow:UpdateEnvironment", 
                        "airflow:CreateWebLoginToken", 
                        "airflow:InvokeRestApi"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Sid": "MWAAPermissions"
                }, 
                {
                    "Action": "s3:GetAccountPublicAccessBlock", 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Condition": {
                        "StringEquals": {
                            "aws:ResourceAccount": "${aws:PrincipalAccount}"
                        }
                    }, 
                    "Sid": "AirflowS3GetAccountPublicAccessBlock"
                }, 
                {
                    "Action": [
                        "s3:GetEncryptionConfiguration"
                    ], 
                    "Resource": "arn:aws:s3:::${aws:PrincipalTag/DomainBucketName}", 
                    "Effect": "Allow", 
                    "Sid": "AirflowS3BucketActions"
                }, 
                {
                    "Action": [
                        "sqs:ChangeMessageVisibility", 
                        "sqs:DeleteMessage", 
                        "sqs:GetQueueAttributes", 
                        "sqs:GetQueueUrl", 
                        "sqs:ReceiveMessage", 
                        "sqs:SendMessage"
                    ], 
                    "Resource": "arn:aws:sqs:*:*:airflow-celery-*", 
                    "Effect": "Allow", 
                    "Sid": "SQSPermissionsForMWAA"
                }, 
                {
                    "Action": [
                        "secretsmanager:DescribeSecret", 
                        "secretsmanager:GetSecretValue"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Condition": {
                        "StringEquals": {
                            "aws:ResourceTag/AmazonDataZoneProject": "${aws:PrincipalTag/AmazonDataZoneProject}", 
                            "aws:ResourceAccount": "${aws:PrincipalAccount}"
                        }
                    }, 
                    "Sid": "FederatedDataConnectionGlueSecret"
                }, 
                {
                    "Action": [
                        "glue:ListConnectionTypes", 
                        "glue:DescribeConnectionType"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Sid": "GlueConnectionAccessForFederatedDatabase"
                }, 
                {
                    "Action": [
                        "glue:ListEntities", 
                        "glue:DescribeEntity", 
                        "glue:GetEntityRecords"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Sid": "GlueEntitiesAccessForFederatedDatabase"
                }, 
                {
                    "Action": [
                        "secretsmanager:GetSecretValue"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Condition": {
                        "StringEquals": {
                            "aws:ResourceTag/for-use-with-all-datazone-projects": "true"
                        }
                    }, 
                    "Sid": "SecretAccessForForUseWithAllDataZoneProjectsSecrets"
                }, 
                {
                    "Action": [
                        "dynamodb:ListTables"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Sid": "AccessForDynamoDbConnections"
                }, 
                {
                    "Action": "lambda:InvokeFunction", 
                    "Resource": "arn:aws:lambda:*:*:function:*", 
                    "Effect": "Allow", 
                    "Condition": {
                        "StringEquals": {
                            "aws:PrincipalTag/SageMakerStudioQueryExecutionRole": "true", 
                            "aws:ResourceTag/federated_athena_datacatalog": "true"
                        }
                    }, 
                    "Sid": "InvokeFunctionPermissionsForAthenaCatalogLambda"
                }, 
                {
                    "Action": "s3:ListBucket", 
                    "Resource": "arn:aws:s3:::*", 
                    "Effect": "Allow", 
                    "Condition": {
                        "StringEquals": {
                            "aws:PrincipalTag/SageMakerStudioQueryExecutionRole": "true", 
                            "aws:ResourceAccount": "${aws:PrincipalAccount}"
                        }
                    }, 
                    "Sid": "ListDomainS3BucketForQueryExecutionRolePermissions"
                }, 
                {
                    "Action": [
                        "s3:ListBucket", 
                        "s3:PutObject", 
                        "s3:GetObject", 
                        "s3:DeleteObject"
                    ], 
                    "Resource": [
                        "arn:aws:s3:::redshift-staging-bucket-*/*", 
                        "arn:aws:s3:::redshift-staging-bucket-*"
                    ], 
                    "Effect": "Allow", 
                    "Condition": {
                        "StringEquals": {
                            "aws:ResourceAccount": "${aws:PrincipalAccount}"
                        }
                    }, 
                    "Sid": "S3PermissionsForAthenaCatalog"
                }, 
                {
                    "Action": "s3:GetObject", 
                    "Resource": "arn:aws:s3:::*/dzd_*/*/dev/sys/athena/*", 
                    "Effect": "Allow", 
                    "Condition": {
                        "StringEquals": {
                            "aws:PrincipalTag/SageMakerStudioQueryExecutionRole": "true", 
                            "aws:ResourceAccount": "${aws:PrincipalAccount}"
                        }
                    }, 
                    "Sid": "GetS3ObjectForQueryExecutionRolePermissions"
                }, 
                {
                    "Action": [
                        "glue:GetUserDefinedFunction", 
                        "glue:GetUserDefinedFunctions"
                    ], 
                    "Resource": [
                        "arn:aws:glue:*:*:catalog", 
                        "arn:aws:glue:*:*:catalog/*", 
                        "arn:aws:glue:*:*:database/*"
                    ], 
                    "Effect": "Allow", 
                    "Condition": {
                        "StringEquals": {
                            "glue:LakeFormationPermissions": "Enabled", 
                            "aws:ResourceAccount": "${aws:PrincipalAccount}"
                        }
                    }, 
                    "Sid": "GetGlueUserDefinedFuncLakeFormationPermissions"
                }, 
                {
                    "Action": [
                        "glue:GetUserDefinedFunction", 
                        "glue:GetUserDefinedFunctions"
                    ], 
                    "Resource": [
                        "arn:aws:glue:*:*:userDefinedFunction/*"
                    ], 
                    "Effect": "Allow", 
                    "Condition": {
                        "StringEquals": {
                            "aws:ResourceAccount": "${aws:PrincipalAccount}"
                        }
                    }, 
                    "Sid": "GetGlueUserDefinedFuncPermissions"
                }, 
                {
                    "NotAction": [
                        "airflow:CreateWebLoginToken", 
                        "airflow:GetEnvironment", 
                        "airflow:InvokeRestApi", 
                        "airflow:ListEnvironments", 
                        "airflow:UpdateEnvironment", 
                        "aoss:APIAccessAll", 
                        "application-autoscaling:DeleteScalingPolicy", 
                        "application-autoscaling:DeleteScheduledAction", 
                        "application-autoscaling:DeregisterScalableTarget", 
                        "application-autoscaling:DescribeScalableTargets", 
                        "application-autoscaling:DescribeScalingActivities", 
                        "application-autoscaling:DescribeScalingPolicies", 
                        "application-autoscaling:DescribeScheduledActions", 
                        "application-autoscaling:PutScalingPolicy", 
                        "application-autoscaling:PutScheduledAction", 
                        "application-autoscaling:RegisterScalableTarget", 
                        "athena:BatchGetNamedQuery", 
                        "athena:BatchGetPreparedStatement", 
                        "athena:BatchGetQueryExecution", 
                        "athena:CreateNamedQuery", 
                        "athena:CreateNotebook", 
                        "athena:CreatePreparedStatement", 
                        "athena:CreatePresignedNotebookUrl", 
                        "athena:DeleteNamedQuery", 
                        "athena:DeleteNotebook", 
                        "athena:DeletePreparedStatement", 
                        "athena:ExportNotebook", 
                        "athena:GetCalculationExecution", 
                        "athena:GetCalculationExecutionCode", 
                        "athena:GetCalculationExecutionStatus", 
                        "athena:GetDatabase", 
                        "athena:GetDataCatalog", 
                        "athena:GetNamedQuery", 
                        "athena:GetNotebookMetadata", 
                        "athena:GetPreparedStatement", 
                        "athena:GetQueryExecution", 
                        "athena:GetQueryResults", 
                        "athena:GetQueryResultsStream", 
                        "athena:GetQueryRuntimeStatistics", 
                        "athena:GetSession", 
                        "athena:GetSessionStatus", 
                        "athena:GetTableMetadata", 
                        "athena:GetWorkGroup", 
                        "athena:ImportNotebook", 
                        "athena:ListDatabases", 
                        "athena:ListDataCatalogs", 
                        "athena:ListEngineVersions", 
                        "athena:ListNamedQueries", 
                        "athena:ListPreparedStatements", 
                        "athena:ListQueryExecutions", 
                        "athena:ListTableMetadata", 
                        "athena:ListTagsForResource", 
                        "athena:ListWorkGroups", 
                        "athena:StartCalculationExecution", 
                        "athena:StartQueryExecution", 
                        "athena:StartSession", 
                        "athena:StopCalculationExecution", 
                        "athena:StopQueryExecution", 
                        "athena:TerminateSession", 
                        "athena:UpdateNamedQuery", 
                        "athena:UpdateNotebook", 
                        "athena:UpdateNotebookMetadata", 
                        "athena:UpdatePreparedStatement", 
                        "bedrock:ApplyGuardrail", 
                        "bedrock:BatchDeleteEvaluationJob", 
                        "bedrock:CreateAgentAlias", 
                        "bedrock:CreateEvaluationJob", 
                        "bedrock:CreatePrompt", 
                        "bedrock:CreatePromptVersion", 
                        "bedrock:DeleteAgentAlias", 
                        "bedrock:DeleteAgentVersion", 
                        "bedrock:DeletePrompt", 
                        "bedrock:GetAgent", 
                        "bedrock:GetAgentActionGroup", 
                        "bedrock:GetAgentAlias", 
                        "bedrock:GetAgentKnowledgeBase", 
                        "bedrock:GetAgentVersion", 
                        "bedrock:GetEvaluationJob", 
                        "bedrock:GetInferenceProfile", 
                        "bedrock:GetIngestionJob", 
                        "bedrock:GetPrompt", 
                        "bedrock:InvokeAgent", 
                        "bedrock:InvokeFlow", 
                        "bedrock:InvokeInlineAgent", 
                        "bedrock:InvokeModel", 
                        "bedrock:InvokeModelWithResponseStream", 
                        "bedrock:ListAgentActionGroups", 
                        "bedrock:ListAgentAliases", 
                        "bedrock:ListAgentKnowledgeBases", 
                        "bedrock:ListAgentVersions", 
                        "bedrock:ListEvaluationJobs", 
                        "bedrock:ListFoundationModels", 
                        "bedrock:ListIngestionJobs", 
                        "bedrock:ListPrompts", 
                        "bedrock:ListTagsForResource", 
                        "bedrock:Retrieve", 
                        "bedrock:RetrieveAndGenerate", 
                        "bedrock:StartIngestionJob", 
                        "bedrock:StopEvaluationJob", 
                        "bedrock:TagResource", 
                        "bedrock:UpdateAgentAlias", 
                        "cloudformation:DescribeStacks", 
                        "cloudformation:GetTemplate", 
                        "cloudwatch:DeleteAlarms", 
                        "cloudwatch:DescribeAlarms", 
                        "cloudwatch:GetMetricData", 
                        "cloudwatch:GetMetricStatistics", 
                        "cloudwatch:PutMetricAlarm", 
                        "cloudwatch:PutMetricData", 
                        "codecommit:BatchDescribeMergeConflicts", 
                        "codecommit:BatchGetCommits", 
                        "codecommit:BatchGetPullRequests", 
                        "codecommit:BatchGetRepositories", 
                        "codecommit:CreateBranch", 
                        "codecommit:CreateCommit", 
                        "codecommit:CreatePullRequest", 
                        "codecommit:DeleteBranch", 
                        "codecommit:DeleteFile", 
                        "codecommit:DescribeMergeConflicts", 
                        "codecommit:DescribePullRequestEvents", 
                        "codecommit:GetBlob", 
                        "codecommit:GetBranch", 
                        "codecommit:GetComment", 
                        "codecommit:GetCommentReactions", 
                        "codecommit:GetCommentsForComparedCommit", 
                        "codecommit:GetCommentsForPullRequest", 
                        "codecommit:GetCommit", 
                        "codecommit:GetCommitHistory", 
                        "codecommit:GetCommitsFromMergeBase", 
                        "codecommit:GetDifferences", 
                        "codecommit:GetFile", 
                        "codecommit:GetFolder", 
                        "codecommit:GetMergeCommit", 
                        "codecommit:GetMergeConflicts", 
                        "codecommit:GetMergeOptions", 
                        "codecommit:GetObjectIdentifier", 
                        "codecommit:GetPullRequest", 
                        "codecommit:GetPullRequestApprovalStates", 
                        "codecommit:GetPullRequestOverrideState", 
                        "codecommit:GetReferences", 
                        "codecommit:GetRepository", 
                        "codecommit:GetRepositoryTriggers", 
                        "codecommit:GetTree", 
                        "codecommit:GetUploadArchiveStatus", 
                        "codecommit:GitPull", 
                        "codecommit:GitPush", 
                        "codecommit:ListAssociatedApprovalRuleTemplatesForRepository", 
                        "codecommit:ListBranches", 
                        "codecommit:ListFileCommitHistory", 
                        "codecommit:ListPullRequests", 
                        "codecommit:ListTagsForResource", 
                        "codecommit:MergeBranchesByFastForward", 
                        "codecommit:MergeBranchesBySquash", 
                        "codecommit:MergeBranchesByThreeWay", 
                        "codecommit:MergePullRequestByFastForward", 
                        "codecommit:MergePullRequestBySquash", 
                        "codecommit:MergePullRequestByThreeWay", 
                        "codecommit:PostCommentForComparedCommit", 
                        "codecommit:PostCommentForPullRequest", 
                        "codecommit:PostCommentReply", 
                        "codecommit:PutCommentReaction", 
                        "codecommit:PutFile", 
                        "codecommit:UpdateComment", 
                        "codecommit:UpdateDefaultBranch", 
                        "codecommit:UpdatePullRequestApprovalRuleContent", 
                        "codecommit:UpdatePullRequestApprovalState", 
                        "codecommit:UpdatePullRequestDescription", 
                        "codecommit:UpdatePullRequestStatus", 
                        "codecommit:UpdatePullRequestTitle", 
                        "codecommit:UpdateRepositoryDescription", 
                        "codewhisperer:GenerateRecommendations", 
                        "datazone:CreateConnection", 
                        "datazone:DeleteConnection", 
                        "datazone:GetConnection", 
                        "datazone:GetDomain", 
                        "datazone:GetDomainExecutionRoleCredentials", 
                        "datazone:GetEnvironment", 
                        "datazone:GetEnvironmentBlueprintConfiguration", 
                        "datazone:GetProject", 
                        "datazone:GetUserProfile", 
                        "datazone:ListConnections", 
                        "datazone:ListEnvironmentBlueprints", 
                        "datazone:ListEnvironments", 
                        "datazone:ListProjects", 
                        "datazone:UpdateConnection", 
                        "dynamodb:BatchGetItem", 
                        "dynamodb:BatchWriteItem", 
                        "dynamodb:Scan", 
                        "dynamodb:Query", 
                        "dynamodb:DescribeBackup", 
                        "dynamodb:DescribeContributorInsights", 
                        "dynamodb:DescribeContinuousBackups", 
                        "dynamodb:DescribeEndpoints", 
                        "dynamodb:DescribeExport", 
                        "dynamodb:DescribeGlobalTable", 
                        "dynamodb:DescribeGlobalTableSettings", 
                        "dynamodb:DescribeImport", 
                        "dynamodb:DescribeKinesisStreamingDestination", 
                        "dynamodb:DescribeLimits", 
                        "dynamodb:DescribeReservedCapacity", 
                        "dynamodb:DescribeReservedCapacityOfferings", 
                        "dynamodb:DescribeStream", 
                        "dynamodb:DescribeTable", 
                        "dynamodb:DescribeTableReplicaAutoScaling", 
                        "dynamodb:DescribeTimeToLive", 
                        "dynamodb:GetItem", 
                        "dynamodb:GetRecords", 
                        "dynamodb:ListExports", 
                        "dynamodb:ListGlobalTables", 
                        "dynamodb:ListImports", 
                        "dynamodb:ListTables", 
                        "dynamodb:ListTagsOfResource", 
                        "dynamodb:PutItem", 
                        "dynamodb:PartiQLSelect", 
                        "dynamodb:PartiQLInsert", 
                        "dynamodb:PartiQLUpdate", 
                        "dynamodb:PartiQLDelete", 
                        "dynamodb:UpdateItem", 
                        "dynamodb:UpdateGlobalTable", 
                        "dynamodb:UpdateTable", 
                        "ec2:AttachNetworkInterface", 
                        "ec2:AuthorizeSecurityGroupEgress", 
                        "ec2:AuthorizeSecurityGroupIngress", 
                        "ec2:CreateFleet", 
                        "ec2:CreateLaunchTemplate", 
                        "ec2:CreateLaunchTemplateVersion", 
                        "ec2:CreateNetworkInterface", 
                        "ec2:CreateNetworkInterfacePermission", 
                        "ec2:CreatePlacementGroup", 
                        "ec2:CreateSecurityGroup", 
                        "ec2:CreateTags", 
                        "ec2:CreateVpcEndpoint", 
                        "ec2:DeleteLaunchTemplate", 
                        "ec2:DeleteNetworkInterface", 
                        "ec2:DeleteNetworkInterfacePermission", 
                        "ec2:DeletePlacementGroup", 
                        "ec2:DeleteTags", 
                        "ec2:DescribeAccountAttributes", 
                        "ec2:DescribeCapacityReservations", 
                        "ec2:DescribeDhcpOptions", 
                        "ec2:DescribeImages", 
                        "ec2:DescribeInstances", 
                        "ec2:DescribeInstanceTypeOfferings", 
                        "ec2:DescribeInstanceTypes", 
                        "ec2:DescribeLaunchTemplates", 
                        "ec2:DescribeNetworkAcls", 
                        "ec2:DescribeNetworkInterfaces", 
                        "ec2:DescribePlacementGroups", 
                        "ec2:DescribeRouteTables", 
                        "ec2:DescribeSecurityGroups", 
                        "ec2:DescribeSubnets", 
                        "ec2:DescribeVolumes", 
                        "ec2:DescribeVolumeStatus", 
                        "ec2:DescribeVpcAttribute", 
                        "ec2:DescribeVpcEndpoints", 
                        "ec2:DescribeVpcs", 
                        "ec2:DetachNetworkInterface", 
                        "ec2:ModifyInstanceAttribute", 
                        "ec2:RevokeSecurityGroupEgress", 
                        "ec2:RevokeSecurityGroupIngress", 
                        "ec2:RunInstances", 
                        "ec2:TerminateInstances", 
                        "ecr:BatchGetImage", 
                        "ecr:DescribeImages", 
                        "ecr:GetAuthorizationToken", 
                        "ecr:GetDownloadUrlForLayer", 
                        "elasticfilesystem:DescribeMountTargets", 
                        "elasticmapreduce:CreatePersistentAppUI", 
                        "elasticmapreduce:DescribeCluster", 
                        "elasticmapreduce:DescribePersistentAppUI", 
                        "elasticmapreduce:GetClusterSessionCredentials", 
                        "elasticmapreduce:GetManagedScalingPolicy", 
                        "elasticmapreduce:GetOnClusterAppUIPresignedURL", 
                        "elasticmapreduce:GetPersistentAppUIPresignedURL", 
                        "elasticmapreduce:ListBootstrapActions", 
                        "elasticmapreduce:ListClusters", 
                        "elasticmapreduce:ListInstanceFleets", 
                        "elasticmapreduce:ListInstanceGroups", 
                        "elasticmapreduce:ListInstances", 
                        "elasticmapreduce:ListReleaseLabels", 
                        "elasticmapreduce:ListSupportedInstanceTypes", 
                        "elasticmapreduce:TerminateJobFlows", 
                        "emr-serverless:AccessInteractiveEndpoints", 
                        "emr-serverless:AccessLivyEndpoints", 
                        "emr-serverless:GetApplication", 
                        "emr-serverless:GetDashboardForJobRun", 
                        "emr-serverless:GetJobRun", 
                        "emr-serverless:ListApplications", 
                        "emr-serverless:ListJobRunAttempts", 
                        "emr-serverless:ListJobRuns", 
                        "emr-serverless:StartApplication", 
                        "emr-serverless:StartJobRun", 
                        "emr-serverless:StopApplication", 
                        "glue:BatchCreatePartition", 
                        "glue:BatchDeletePartition", 
                        "glue:BatchDeleteTable", 
                        "glue:BatchDeleteTableVersion", 
                        "glue:BatchGetPartition", 
                        "glue:BatchGetTableOptimizer", 
                        "glue:BatchStopJobRun", 
                        "glue:BatchUpdatePartition", 
                        "glue:CancelDataQualityRuleRecommendationRun", 
                        "glue:CancelDataQualityRulesetEvaluationRun", 
                        "glue:CancelStatement", 
                        "glue:CreateBlueprint", 
                        "glue:CreateDatabase", 
                        "glue:CreateDataQualityRuleset", 
                        "glue:CreateJob", 
                        "glue:CreatePartition", 
                        "glue:CreatePartitionIndex", 
                        "glue:CreateSession", 
                        "glue:CreateTable", 
                        "glue:CreateWorkflow", 
                        "glue:DeleteBlueprint", 
                        "glue:DeleteColumnStatisticsForPartition", 
                        "glue:DeleteColumnStatisticsForTable", 
                        "glue:DeleteDatabase", 
                        "glue:DeleteDataQualityRuleset", 
                        "glue:DeleteJob", 
                        "glue:DeletePartition", 
                        "glue:DeletePartitionIndex", 
                        "glue:DeleteSession", 
                        "glue:DeleteTable", 
                        "glue:DeleteTableVersion", 
                        "glue:DeleteWorkflow", 
                        "glue:DescribeConnectionType", 
                        "glue:DescribeEntity", 
                        "glue:GetCatalog", 
                        "glue:GetCatalogImportStatus", 
                        "glue:GetCatalogs", 
                        "glue:GetClassifier", 
                        "glue:GetClassifiers", 
                        "glue:GetColumnStatisticsForPartition", 
                        "glue:GetColumnStatisticsForTable", 
                        "glue:GetColumnStatisticsTaskRun", 
                        "glue:GetColumnStatisticsTaskRuns", 
                        "glue:GetCompletion", 
                        "glue:GetConnection", 
                        "glue:GetConnections", 
                        "glue:GetDashboardUrl", 
                        "glue:GetDatabase", 
                        "glue:GetDatabases", 
                        "glue:GetDataQualityModel", 
                        "glue:GetDataQualityModelResult", 
                        "glue:GetDataQualityResult", 
                        "glue:GetDataQualityRuleRecommendationRun", 
                        "glue:GetDataQualityRuleset", 
                        "glue:GetDataQualityRulesetEvaluationRun", 
                        "glue:GetEntityRecords", 
                        "glue:GetGeneratedCode", 
                        "glue:GetPartition", 
                        "glue:GetPartitionIndexes", 
                        "glue:GetPartitions", 
                        "glue:GetSession", 
                        "glue:GetStatement", 
                        "glue:GetTable", 
                        "glue:GetTableOptimizer", 
                        "glue:GetTables", 
                        "glue:GetTableVersion", 
                        "glue:GetTableVersions", 
                        "glue:GetTags", 
                        "glue:GetUserDefinedFunction", 
                        "glue:GetUserDefinedFunctions", 
                        "glue:ListConnectionTypes", 
                        "glue:ListCrawls", 
                        "glue:ListDataQualityResults", 
                        "glue:ListDataQualityRuleRecommendationRuns", 
                        "glue:ListDataQualityRulesetEvaluationRuns", 
                        "glue:ListDataQualityRulesets", 
                        "glue:ListEntities", 
                        "glue:ListSessions", 
                        "glue:ListStatements", 
                        "glue:ListTableOptimizerRuns", 
                        "glue:NotifyEvent", 
                        "glue:PassConnection", 
                        "glue:PublishDataQuality", 
                        "glue:PutDataQualityProfileAnnotation", 
                        "glue:PutDataQualityStatisticAnnotation", 
                        "glue:PutWorkflowRunProperties", 
                        "glue:ResumeWorkflowRun", 
                        "glue:RunStatement", 
                        "glue:SearchTables", 
                        "glue:StartBlueprintRun", 
                        "glue:StartCompletion", 
                        "glue:StartDataQualityRuleRecommendationRun", 
                        "glue:StartDataQualityRulesetEvaluationRun", 
                        "glue:StartJobRun", 
                        "glue:StartWorkflowRun", 
                        "glue:StopSession", 
                        "glue:StopWorkflowRun", 
                        "glue:TagResource", 
                        "glue:UntagResource", 
                        "glue:UpdateBlueprint", 
                        "glue:UpdateCatalog", 
                        "glue:UpdateColumnStatisticsForPartition", 
                        "glue:UpdateColumnStatisticsForTable", 
                        "glue:UpdateDataQualityRuleset", 
                        "glue:UpdateJob", 
                        "glue:UpdatePartition", 
                        "glue:UpdateTable", 
                        "glue:UpdateWorkflow", 
                        "glue:UseGlueStudio", 
                        "iam:CreateServiceLinkedRole", 
                        "iam:GetRole", 
                        "iam:ListRoles", 
                        "iam:PassRole", 
                        "kms:CreateGrant", 
                        "kms:Decrypt", 
                        "kms:DescribeKey", 
                        "kms:Encrypt", 
                        "kms:GenerateDataKey", 
                        "kms:GenerateDataKeyWithoutPlaintext", 
                        "kms:GetPublicKey", 
                        "kms:ListAliases", 
                        "kms:ListGrants", 
                        "kms:ReEncryptFrom", 
                        "kms:ReEncryptTo", 
                        "kms:RevokeGrant", 
                        "lakeformation:GetDataAccess", 
                        "lambda:InvokeFunction", 
                        "logs:CreateLogGroup", 
                        "logs:CreateLogStream", 
                        "logs:DescribeLogGroups", 
                        "logs:DescribeLogStreams", 
                        "logs:FilterLogEvents", 
                        "logs:GetLogEvents", 
                        "logs:GetLogGroupFields", 
                        "logs:GetLogRecord", 
                        "logs:GetQueryResults", 
                        "logs:PutLogEvents", 
                        "logs:StartQuery", 
                        "logs:StopQuery", 
                        "pricing:GetProducts", 
                        "q:SendMessage", 
                        "q:StartConversation", 
                        "redshift-data:BatchExecuteStatement", 
                        "redshift-data:CancelStatement", 
                        "redshift-data:DescribeStatement", 
                        "redshift-data:DescribeTable", 
                        "redshift-data:ExecuteStatement", 
                        "redshift-data:GetStagingBucketLocation", 
                        "redshift-data:GetStatementResult", 
                        "redshift-data:ListDatabases", 
                        "redshift-data:ListSchemas", 
                        "redshift-data:ListStatements", 
                        "redshift-data:ListTables", 
                        "redshift-serverless:GetCredentials", 
                        "redshift-serverless:GetManagedWorkgroup", 
                        "redshift-serverless:GetNamespace", 
                        "redshift-serverless:GetWorkgroup", 
                        "redshift-serverless:ListNamespaces", 
                        "redshift-serverless:ListTagsForResource", 
                        "redshift-serverless:ListWorkgroups", 
                        "redshift:DescribeClusters", 
                        "redshift:DescribeTags", 
                        "redshift:GetClusterCredentialsWithIAM", 
                        "resource-groups:CreateGroup", 
                        "resource-groups:DeleteGroup", 
                        "resource-groups:GetGroupQuery", 
                        "resource-groups:ListGroupResources", 
                        "resource-groups:Tag", 
                        "s3:AbortMultipartUpload", 
                        "s3:DeleteObject", 
                        "s3:DeleteObjectVersion", 
                        "s3:GetAccountPublicAccessBlock", 
                        "s3:GetBucketLocation", 
                        "s3:GetEncryptionConfiguration", 
                        "s3:GetObject*", 
                        "s3:ListBucket", 
                        "s3:ListBucketVersions", 
                        "s3:ListMultipartUploadParts", 
                        "s3:PutObject", 
                        "s3:PutObjectRetention", 
                        "s3:PutObjectTagging", 
                        "s3:ReplicateObject", 
                        "s3:RestoreObject", 
                        "sagemaker-mlflow:AccessUI", 
                        "sagemaker-mlflow:CreateExperiment", 
                        "sagemaker-mlflow:CreateModelVersion", 
                        "sagemaker-mlflow:CreateRegisteredModel", 
                        "sagemaker-mlflow:CreateRun", 
                        "sagemaker-mlflow:DeleteExperiment", 
                        "sagemaker-mlflow:DeleteModelVersion", 
                        "sagemaker-mlflow:DeleteModelVersionTag", 
                        "sagemaker-mlflow:DeleteRegisteredModel", 
                        "sagemaker-mlflow:DeleteRegisteredModelAlias", 
                        "sagemaker-mlflow:DeleteRegisteredModelTag", 
                        "sagemaker-mlflow:DeleteRun", 
                        "sagemaker-mlflow:DeleteTag", 
                        "sagemaker-mlflow:GetDownloadURIForModelVersionArtifacts", 
                        "sagemaker-mlflow:GetExperiment", 
                        "sagemaker-mlflow:GetExperimentByName", 
                        "sagemaker-mlflow:GetLatestModelVersions", 
                        "sagemaker-mlflow:GetMetricHistory", 
                        "sagemaker-mlflow:GetModelVersion", 
                        "sagemaker-mlflow:GetModelVersionByAlias", 
                        "sagemaker-mlflow:GetRegisteredModel", 
                        "sagemaker-mlflow:GetRun", 
                        "sagemaker-mlflow:ListArtifacts", 
                        "sagemaker-mlflow:LogBatch", 
                        "sagemaker-mlflow:LogInputs", 
                        "sagemaker-mlflow:LogMetric", 
                        "sagemaker-mlflow:LogModel", 
                        "sagemaker-mlflow:LogParam", 
                        "sagemaker-mlflow:RenameRegisteredModel", 
                        "sagemaker-mlflow:RestoreExperiment", 
                        "sagemaker-mlflow:RestoreRun", 
                        "sagemaker-mlflow:SearchExperiments", 
                        "sagemaker-mlflow:SearchModelVersions", 
                        "sagemaker-mlflow:SearchRegisteredModels", 
                        "sagemaker-mlflow:SearchRuns", 
                        "sagemaker-mlflow:SetExperimentTag", 
                        "sagemaker-mlflow:SetRegisteredModelAlias", 
                        "sagemaker-mlflow:SetRegisteredModelTag", 
                        "sagemaker-mlflow:SetTag", 
                        "sagemaker-mlflow:TransitionModelVersionStage", 
                        "sagemaker-mlflow:UpdateExperiment", 
                        "sagemaker-mlflow:UpdateModelVersion", 
                        "sagemaker-mlflow:UpdateRegisteredModel", 
                        "sagemaker-mlflow:UpdateRun", 
                        "sagemaker:AddAssociation", 
                        "sagemaker:AddTags", 
                        "sagemaker:BatchDescribeModelPackage", 
                        "sagemaker:BatchGetMetrics", 
                        "sagemaker:BatchPutMetrics", 
                        "sagemaker:CallPartnerAppApi", 
                        "sagemaker:CreateAction", 
                        "sagemaker:CreateApp", 
                        "sagemaker:CreateArtifact", 
                        "sagemaker:CreateAutoMLJob", 
                        "sagemaker:CreateAutoMLJobV2", 
                        "sagemaker:CreateContext", 
                        "sagemaker:CreateEndpoint", 
                        "sagemaker:CreateEndpointConfig", 
                        "sagemaker:CreateHyperParameterTuningJob", 
                        "sagemaker:CreateInferenceComponent", 
                        "sagemaker:CreateInferenceRecommendationsJob", 
                        "sagemaker:CreateModel", 
                        "sagemaker:CreateModelPackage", 
                        "sagemaker:CreateModelPackageGroup", 
                        "sagemaker:CreatePartnerAppPresignedUrl", 
                        "sagemaker:CreatePipeline", 
                        "sagemaker:CreatePresignedDomainUrl", 
                        "sagemaker:CreatePresignedMlflowTrackingServerUrl", 
                        "sagemaker:CreateProcessingJob", 
                        "sagemaker:CreateSpace", 
                        "sagemaker:CreateTrainingJob", 
                        "sagemaker:CreateTransformJob", 
                        "sagemaker:CreateUserProfile", 
                        "sagemaker:DeleteAction", 
                        "sagemaker:DeleteApp", 
                        "sagemaker:DeleteArtifact", 
                        "sagemaker:DeleteAssociation", 
                        "sagemaker:DeleteContext", 
                        "sagemaker:DeleteEndpoint", 
                        "sagemaker:DeleteEndpointConfig", 
                        "sagemaker:DeleteInferenceComponent", 
                        "sagemaker:DeleteModel", 
                        "sagemaker:DeleteModelPackage", 
                        "sagemaker:DeleteModelPackageGroup", 
                        "sagemaker:DeletePipeline", 
                        "sagemaker:DeleteSpace", 
                        "sagemaker:DeleteTags", 
                        "sagemaker:DeleteUserProfile", 
                        "sagemaker:DescribeAction", 
                        "sagemaker:DescribeApp", 
                        "sagemaker:DescribeArtifact", 
                        "sagemaker:DescribeAutoMLJob", 
                        "sagemaker:DescribeContext", 
                        "sagemaker:DescribeDomain", 
                        "sagemaker:DescribeEndpoint", 
                        "sagemaker:DescribeEndpointConfig", 
                        "sagemaker:DescribeHyperParameterTuningJob", 
                        "sagemaker:DescribeImage", 
                        "sagemaker:DescribeImageVersion", 
                        "sagemaker:DescribeInferenceComponent", 
                        "sagemaker:DescribeInferenceRecommendationsJob", 
                        "sagemaker:DescribeMlflowTrackingServer", 
                        "sagemaker:DescribeModel", 
                        "sagemaker:DescribeModelPackage", 
                        "sagemaker:DescribeModelPackageGroup", 
                        "sagemaker:DescribeOptimizationJob", 
                        "sagemaker:DescribePartnerApp", 
                        "sagemaker:DescribePipeline", 
                        "sagemaker:DescribePipelineDefinitionForExecution", 
                        "sagemaker:DescribePipelineExecution", 
                        "sagemaker:DescribeProcessingJob", 
                        "sagemaker:DescribeSpace", 
                        "sagemaker:DescribeTrainingJob", 
                        "sagemaker:DescribeTransformJob", 
                        "sagemaker:DescribeTrialComponent", 
                        "sagemaker:DescribeUserProfile", 
                        "sagemaker:GetSearchSuggestions", 
                        "sagemaker:InvokeEndpoint", 
                        "sagemaker:InvokeEndpointAsync", 
                        "sagemaker:InvokeEndpointWithResponseStream", 
                        "sagemaker:ListApps", 
                        "sagemaker:ListArtifacts", 
                        "sagemaker:ListAssociations", 
                        "sagemaker:ListAutoMLJobs", 
                        "sagemaker:ListCandidatesForAutoMLJob", 
                        "sagemaker:ListContexts", 
                        "sagemaker:ListDomains", 
                        "sagemaker:ListEndpointConfigs", 
                        "sagemaker:ListEndpoints", 
                        "sagemaker:ListHubContents", 
                        "sagemaker:ListHubs", 
                        "sagemaker:ListHyperParameterTuningJobs", 
                        "sagemaker:ListImageVersions", 
                        "sagemaker:ListInferenceComponents", 
                        "sagemaker:ListMlflowTrackingServers", 
                        "sagemaker:ListModelMetadata", 
                        "sagemaker:ListModelPackageGroups", 
                        "sagemaker:ListModelPackages", 
                        "sagemaker:ListModels", 
                        "sagemaker:ListPartnerApps", 
                        "sagemaker:ListPipelineExecutions", 
                        "sagemaker:ListPipelineExecutionSteps", 
                        "sagemaker:ListPipelineParametersForExecution", 
                        "sagemaker:ListPipelines", 
                        "sagemaker:ListProcessingJobs", 
                        "sagemaker:ListSpaces", 
                        "sagemaker:ListTags", 
                        "sagemaker:ListTrainingJobs", 
                        "sagemaker:ListTrainingJobsForHyperParameterTuningJob", 
                        "sagemaker:ListTransformJobs", 
                        "sagemaker:ListUserProfiles", 
                        "sagemaker:QueryLineage", 
                        "sagemaker:RetryPipelineExecution", 
                        "sagemaker:Search", 
                        "sagemaker:SendPipelineExecutionStepFailure", 
                        "sagemaker:SendPipelineExecutionStepSuccess", 
                        "sagemaker:StartMlflowTrackingServer", 
                        "sagemaker:StartPipelineExecution", 
                        "sagemaker:StopAutoMLJob", 
                        "sagemaker:StopHyperParameterTuningJob", 
                        "sagemaker:StopMlflowTrackingServer", 
                        "sagemaker:StopPipelineExecution", 
                        "sagemaker:StopProcessingJob", 
                        "sagemaker:StopTrainingJob", 
                        "sagemaker:StopTransformJob", 
                        "sagemaker:UpdateEndpoint", 
                        "sagemaker:UpdateEndpointWeightsAndCapacities", 
                        "sagemaker:UpdateInferenceComponentRuntimeConfig", 
                        "sagemaker:UpdateMlflowTrackingServer", 
                        "sagemaker:UpdateModelPackage", 
                        "sagemaker:UpdatePipeline", 
                        "sagemaker:UpdatePipelineExecution", 
                        "sagemaker:UpdateSpace", 
                        "sagemaker:UpdateTrainingJob", 
                        "secretsmanager:DescribeSecret", 
                        "secretsmanager:GetSecretValue", 
                        "secretsmanager:ListSecrets", 
                        "secretsmanager:PutSecretValue", 
                        "sqlworkbench:CreateConnection", 
                        "sqlworkbench:DeleteQCustomContext", 
                        "sqlworkbench:DeleteTab", 
                        "sqlworkbench:DriverExecute", 
                        "sqlworkbench:GetAutocompletionMetadata", 
                        "sqlworkbench:GetAutocompletionResource", 
                        "sqlworkbench:GetQCustomContext", 
                        "sqlworkbench:GetQSqlPromptQuotas", 
                        "sqlworkbench:GetQSqlRecommendations", 
                        "sqlworkbench:GetQueryExecutionHistory", 
                        "sqlworkbench:GetUserInfo", 
                        "sqlworkbench:ListQueryExecutionHistory", 
                        "sqlworkbench:ListTabs", 
                        "sqlworkbench:PassAccountSettings", 
                        "sqlworkbench:PutQCustomContext", 
                        "sqlworkbench:PutTab", 
                        "sqs:ChangeMessageVisibility", 
                        "sqs:DeleteMessage", 
                        "sqs:GetQueueAttributes", 
                        "sqs:GetQueueUrl", 
                        "sqs:ReceiveMessage", 
                        "sqs:SendMessage", 
                        "ssm:GetParameter", 
                        "ssm:GetParameters", 
                        "ssm:GetParametersByPath", 
                        "sts:AssumeRole", 
                        "sts:GetCallerIdentity", 
                        "sts:SetSourceIdentity", 
                        "sts:TagSession", 
                        "tag:GetResources"
                    ], 
                    "Resource": "*", 
                    "Effect": "Deny", 
                    "Sid": "NotDeniedOperations"
                }
            ]
        }, 
        "IsDefaultVersion": true
    }
}
